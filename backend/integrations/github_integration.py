"""
GitHub Integration Service
Handles pushing code to GitHub and creating PRs
"""
import os
import subprocess
import logging
import httpx
from pathlib import Path
from typing import Optional, Dict

from config.environment import get_config, should_use_git

logger = logging.getLogger(__name__)


class GitHubIntegrationService:
    """
    Integrates with GitHub API for:
    - Creating repositories
    - Pushing code
    - Creating pull requests
    """
    
    def __init__(self):
        git_config = get_config().get("git", {})
        
        self.enabled = should_use_git() and git_config.get("mode") in ["github", "both"]
        self.token = git_config.get("github_token") or os.getenv("GITHUB_TOKEN")
        self.org = git_config.get("github_org", "catalyst-generated")
        self.api_base = "https://api.github.com"
        
        if self.enabled and not self.token:
            logger.warning("GitHub integration enabled but no token provided")
            self.enabled = False
        
        if self.enabled:
            logger.info(f"âœ… GitHub integration enabled for org: {self.org}")
        else:
            logger.info("âœ… GitHub integration disabled")
    
    async def ensure_repo_exists(self, repo_name: str) -> Optional[str]:
        """
        Ensure GitHub repository exists (create if needed)
        
        Args:
            repo_name: Repository name
            
        Returns:
            Repository URL or None
        """
        if not self.enabled:
            return None
        
        try:
            # Check if repo exists
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.api_base}/repos/{self.org}/{repo_name}",
                    headers={"Authorization": f"token {self.token}"}
                )
                
                if response.status_code == 200:
                    repo_url = response.json()["html_url"]
                    logger.info(f"âœ… Repository exists: {repo_url}")
                    return repo_url
                
                elif response.status_code == 404:
                    # Create repository
                    logger.info(f"Creating repository: {self.org}/{repo_name}")
                    
                    create_response = await client.post(
                        f"{self.api_base}/orgs/{self.org}/repos",
                        headers={"Authorization": f"token {self.token}"},
                        json={
                            "name": repo_name,
                            "description": f"Generated by Catalyst AI",
                            "private": False,
                            "auto_init": False
                        }
                    )
                    
                    if create_response.status_code == 201:
                        repo_url = create_response.json()["html_url"]
                        logger.info(f"âœ… Repository created: {repo_url}")
                        return repo_url
                    else:
                        logger.error(f"Failed to create repo: {create_response.text}")
                        return None
                
        except Exception as e:
            logger.error(f"Error ensuring repo exists: {e}")
            return None
    
    async def push_to_github(
        self,
        project_name: str,
        branch: str = "main"
    ) -> bool:
        """
        Push local repository to GitHub
        
        Args:
            project_name: Project name
            branch: Branch to push
            
        Returns:
            bool: Success status
        """
        if not self.enabled:
            logger.info("GitHub push skipped (not enabled)")
            return False
        
        try:
            from services.git_service_v2 import get_git_service
            
            git_service = get_git_service()
            repo_path = git_service.repos_path / project_name
            
            # Ensure GitHub repo exists
            github_url = await self.ensure_repo_exists(project_name)
            
            if not github_url:
                logger.error("Failed to ensure GitHub repo exists")
                return False
            
            # Convert to SSH or HTTPS URL with token
            push_url = f"https://{self.token}@github.com/{self.org}/{project_name}.git"
            
            # Add remote if doesn't exist
            result = subprocess.run(
                ["git", "remote", "get-url", "origin"],
                cwd=repo_path,
                capture_output=True
            )
            
            if result.returncode != 0:
                # Add remote
                subprocess.run(
                    ["git", "remote", "add", "origin", push_url],
                    cwd=repo_path,
                    check=True
                )
                logger.info(f"âœ… Added remote: origin â†’ {github_url}")
            else:
                # Update remote URL
                subprocess.run(
                    ["git", "remote", "set-url", "origin", push_url],
                    cwd=repo_path,
                    check=True
                )
            
            # Push branch
            logger.info(f"ðŸ“¤ Pushing {branch} to GitHub...")
            
            result = subprocess.run(
                ["git", "push", "-u", "origin", branch, "--force"],
                cwd=repo_path,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                logger.info(f"âœ… Pushed {branch} to {github_url}")
                return True
            else:
                logger.error(f"Git push failed: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"Failed to push to GitHub: {e}")
            return False
    
    async def create_pull_request(
        self,
        project_name: str,
        branch: str,
        title: str,
        description: str = "",
        base: str = "main"
    ) -> Optional[str]:
        """
        Create a pull request on GitHub
        
        Args:
            project_name: Project name
            branch: Source branch (head)
            title: PR title
            description: PR description
            base: Target branch
            
        Returns:
            PR URL or None
        """
        if not self.enabled:
            return None
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.api_base}/repos/{self.org}/{project_name}/pulls",
                    headers={
                        "Authorization": f"token {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    json={
                        "title": title,
                        "head": branch,
                        "base": base,
                        "body": description,
                        "draft": False
                    }
                )
                
                if response.status_code == 201:
                    pr_data = response.json()
                    pr_url = pr_data["html_url"]
                    pr_number = pr_data["number"]
                    
                    logger.info(f"âœ… Created PR #{pr_number}: {pr_url}")
                    return pr_url
                    
                elif response.status_code == 422:
                    # PR might already exist
                    logger.warning(f"PR already exists for branch {branch}")
                    
                    # Get existing PR
                    list_response = await client.get(
                        f"{self.api_base}/repos/{self.org}/{project_name}/pulls",
                        headers={"Authorization": f"token {self.token}"},
                        params={"head": f"{self.org}:{branch}", "state": "open"}
                    )
                    
                    if list_response.status_code == 200:
                        prs = list_response.json()
                        if prs:
                            return prs[0]["html_url"]
                    
                    return None
                    
                else:
                    logger.error(f"Failed to create PR: {response.text}")
                    return None
                    
        except Exception as e:
            logger.error(f"Error creating PR: {e}")
            return None
    
    async def get_repo_info(self, project_name: str) -> Optional[Dict]:
        """Get GitHub repository information"""
        if not self.enabled:
            return None
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.api_base}/repos/{self.org}/{project_name}",
                    headers={"Authorization": f"token {self.token}"}
                )
                
                if response.status_code == 200:
                    return response.json()
                
                return None
                
        except Exception as e:
            logger.error(f"Error getting repo info: {e}")
            return None


# Singleton instance
_github_service = None


def get_github_service() -> GitHubIntegrationService:
    """Get or create GitHubIntegrationService singleton"""
    global _github_service
    if _github_service is None:
        _github_service = GitHubIntegrationService()
    return _github_service
