# Catalyst Frontend Dockerfile - Artifactory Version (With Config Files)
# Multi-stage build for optimized production image
# Build context: /app/frontend (frontend directory)
# Uses .npmrc.artifactory and .yarnrc.artifactory for registry configuration

# Stage 1: Build stage
FROM artifactory.devtools.syd.c1.macquarie.com:9996/node:18-alpine as builder

WORKDIR /app

# Disable SSL verification for Alpine package manager due to certificate issues
# First, update apk and install ca-certificates without checking certificates
RUN apk add --update --no-check-certificate --no-cache ca-certificates

# Change repositories to HTTP
RUN sed -i 's/https/http/g' /etc/apk/repositories

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    && yarn --version

# Copy registry configuration files
COPY .npmrc.artifactory .npmrc
COPY .yarnrc.artifactory .yarnrc

# Disable SSL verification for Artifactory
RUN yarn config set strict-ssl false && \
    npm config set strict-ssl false

# Verify registry configuration
RUN echo "Configured registries:" && \
    cat .npmrc && \
    cat .yarnrc && \
    yarn config get registry

# Copy package files from frontend directory
COPY package.json yarn.lock ./

# Install dependencies with Artifactory registry
# The registry configuration from .npmrc and .yarnrc will be used
# SSL verification disabled via config files
RUN yarn install --frozen-lockfile \
    --network-timeout 600000 \
    --network-concurrency 1 || \
    (echo "Retrying yarn install..." && \
     yarn cache clean && \
     yarn install --network-timeout 600000 --network-concurrency 1)

# Copy source code
COPY . ./

# Build arguments for environment variables
ARG REACT_APP_BACKEND_URL=http://localhost:8001
ENV REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}

# Ensure node_modules/.bin is in PATH
ENV PATH=/app/node_modules/.bin:$PATH

# Build application
RUN yarn build

# Stage 2: Runtime stage with Nginx
FROM artifactory.devtools.syd.c1.macquarie.com:9996/nginx:alpine

# Copy custom nginx config from frontend directory
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application
COPY --from=builder /app/build /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1000 catalyst && \
    adduser -D -u 1000 -G catalyst catalyst && \
    chown -R catalyst:catalyst /usr/share/nginx/html && \
    chown -R catalyst:catalyst /var/cache/nginx && \
    chown -R catalyst:catalyst /var/log/nginx && \
    touch /var/run/nginx.pid && \
    chown catalyst:catalyst /var/run/nginx.pid

USER catalyst

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
