# Catalyst Frontend Dockerfile - Artifactory Version (Fixed)
# Multi-stage build for optimized production image
# Build context: /app/frontend (frontend directory)

# Stage 1: Build stage
FROM artifactory.devtools.syd.c1.macquarie.com:9996/node:20-alpine as builder

WORKDIR /app

# Disable SSL verification for Alpine package manager due to certificate issues
# First, update apk and install ca-certificates without checking certificates
RUN apk add --update --no-check-certificate --no-cache ca-certificates

# Change Alpine repositories to use HTTP instead of HTTPS
RUN sed -i 's/https/http/g' /etc/apk/repositories

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    ca-certificates \
    && yarn --version

# Set environment to bypass SSL for npm packages
# Set NODE_ENV to development to ensure devDependencies are installed
ENV NODE_TLS_REJECT_UNAUTHORIZED=0
ENV NODE_ENV=development

# Configure yarn/npm to use PUBLIC npm registry with SSL disabled
RUN yarn config set registry https://registry.npmjs.org/ && \
    npm config set registry https://registry.npmjs.org/ && \
    yarn config set strict-ssl false && \
    npm config set strict-ssl false && \
    echo "Registry configured:" && \
    yarn config get registry && \
    yarn config list

# Copy package files from frontend directory
COPY frontend/package.json frontend/yarn.lock ./

# Verify files are present
RUN echo "Checking package files:" && \
    ls -la package.json yarn.lock && \
    echo "Package.json content preview:" && \
    head -20 package.json

# Install dependencies with increased timeout
# SSL verification disabled via config (strict-ssl false)
# NOTE: Install production + dev dependencies (craco is in devDependencies)
# Removed --frozen-lockfile to allow yarn to regenerate if needed
RUN echo "Starting yarn install..." && \
    yarn install \
    --network-timeout 600000 \
    --network-concurrency 1 \
    --verbose && \
    echo "Yarn install completed successfully" && \
    echo "Checking node_modules directory:" && \
    ls -la node_modules/ | head -20 && \
    echo "Checking node_modules/.bin directory:" && \
    ls -la node_modules/.bin/ | head -20

# Verify dependencies installed
RUN echo "=== Verifying installed packages ===" && \
    ls -la node_modules/.bin/ | head -20 && \
    if [ -f node_modules/.bin/craco ]; then \
        echo "✓ craco binary found"; \
    else \
        echo "✗ craco binary NOT found"; \
        exit 1; \
    fi

# Copy source code
COPY . ./

# Build arguments for environment variables
ARG REACT_APP_BACKEND_URL=http://localhost:8001
ENV REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}

# Change NODE_ENV to production for build
ENV NODE_ENV=production

# Ensure node_modules/.bin is in PATH for build tools like craco
ENV PATH=/app/node_modules/.bin:$PATH

# Build application using npx (more reliable than relying on PATH)
RUN echo "=== Starting React build ===" && \
    echo "Current directory:" && pwd && \
    echo "Files in current directory:" && ls -la && \
    echo "Checking for craco:" && \
    which craco || echo "craco not in PATH" && \
    ls -la node_modules/.bin/craco || echo "craco binary not found" && \
    echo "Environment:" && \
    echo "PATH=$PATH" && \
    echo "REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL" && \
    echo "Building with npx craco..." && \
    npx craco build && \
    echo "=== Build completed ===" && \
    ls -la build/ | head -10

# Stage 2: Runtime stage with Nginx
FROM artifactory.devtools.syd.c1.macquarie.com:9996/nginx:alpine

# Copy built application
COPY --from=builder /app/build /usr/share/nginx/html

# Copy custom nginx config from frontend directory
COPY nginx.conf /etc/nginx/nginx.conf

# Create a simple entrypoint script that just starts nginx
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'exec nginx -g "daemon off;"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Fix permissions for nginx directories and files
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown nginx:nginx /etc/nginx/nginx.conf && \
    # Test nginx configuration
    nginx -t

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Use custom entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]
